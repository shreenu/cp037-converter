const cp037ToAscii = {
  0x00: "\x00",
  0x01: "\x01",
  0x02: "\x02",
  0x03: "\x03",
  0x04: "\x9C",
  0x05: "\t",
  0x06: "\x86",
  0x07: "\x7F",
  0x08: "\x97",
  0x09: "\x8D",
  0x0a: "\x8E",
  0x0b: "\x0B",
  0x0c: "\x0C",
  0x0d: "\r",
  0x0e: "\x0E",
  0x0f: "\x0F",
  0x10: "\x10",
  0x11: "\x11",
  0x12: "\x12",
  0x13: "\x13",
  0x14: "\x9D",
  0x15: "\n",
  0x16: "\x08",
  0x17: "\x87",
  0x18: "\x18",
  0x19: "\x19",
  0x1a: "\x92",
  0x1b: "\x8F",
  0x1c: "\x1C",
  0x1d: "\x1D",
  0x1e: "\x1E",
  0x1f: "\x1F",
  0x20: "\x80",
  0x21: "\x81",
  0x22: "\x82",
  0x23: "\x83",
  0x24: "\x84",
  0x25: "\n",
  0x26: "\x17",
  0x27: "\x1B",
  0x28: "\x88",
  0x29: "\x89",
  0x2a: "\x8A",
  0x2b: "\x8B",
  0x2c: "\x8C",
  0x2d: "\x05",
  0x2e: "\x06",
  0x2f: "\x07",
  0x30: "\x90",
  0x31: "\x91",
  0x32: "\x16",
  0x33: "\x93",
  0x34: "\x94",
  0x35: "\x95",
  0x36: "\x96",
  0x37: "\x04",
  0x38: "\x98",
  0x39: "\x99",
  0x3a: "\x9A",
  0x3b: "\x9B",
  0x3c: "\x14",
  0x3d: "\x15",
  0x3e: "\x9E",
  0x3f: "\x1A",
  0x40: " ",
  0x41: "\u00A0",
  0x42: "\u00E2",
  0x43: "\u00E4",
  0x44: "\u00E0",
  0x45: "\u00E1",
  0x46: "\u00E3",
  0x47: "\u00E5",
  0x48: "\u00E7",
  0x49: "\u00F1",
  0x4a: "[",
  0x4b: ".",
  0x4c: "<",
  0x4d: "(",
  0x4e: "+",
  0x4f: "|",
  0x50: "&",
  0x51: "\u00E9",
  0x52: "\u00EA",
  0x53: "\u00EB",
  0x54: "\u00E8",
  0x55: "\u00ED",
  0x56: "\u00EE",
  0x57: "\u00EF",
  0x58: "\u00EC",
  0x59: "\u00DF",
  0x5a: "!",
  0x5b: "$",
  0x5c: "*",
  0x5d: ")",
  0x5e: ";",
  0x5f: "\u00AC",
  0x60: "-",
  0x61: "/",
  0x62: "\u00C2",
  0x63: "\u00C4",
  0x64: "\u00C0",
  0x65: "\u00C1",
  0x66: "\u00C3",
  0x67: "\u00C5",
  0x68: "\u00C7",
  0x69: "\u00D1",
  0x6a: "\u00A6",
  0x6b: ",",
  0x6c: "%",
  0x6d: "_",
  0x6e: ">",
  0x6f: "?",
  0x70: "\u00F8",
  0x71: "\u00C9",
  0x72: "\u00CA",
  0x73: "\u00CB",
  0x74: "\u00C8",
  0x75: "\u00CD",
  0x76: "\u00CE",
  0x77: "\u00CF",
  0x78: "\u00CC",
  0x79: "`",
  0x7a: ":",
  0x7b: "#",
  0x7c: "@",
  0x7d: "'",
  0x7e: "=",
  0x7f: '"',
  0x80: "\u00D8",
  0x81: "a",
  0x82: "b",
  0x83: "c",
  0x84: "d",
  0x85: "e",
  0x86: "f",
  0x87: "g",
  0x88: "h",
  0x89: "i",
  0x8a: "\u00AB",
  0x8b: "\u00BB",
  0x8c: "\u00F0",
  0x8d: "\u00FD",
  0x8e: "\u00FE",
  0x8f: "\u00B1",
  0x90: "\u00B0",
  0x91: "j",
  0x92: "k",
  0x93: "l",
  0x94: "m",
  0x95: "n",
  0x96: "o",
  0x97: "p",
  0x98: "q",
  0x99: "r",
  0x9a: "\u00AA",
  0x9b: "\u00BA",
  0x9c: "\u00E6",
  0x9d: "\u00B8",
  0x9e: "\u00C6",
  0x9f: "\u00A4",
  0xa0: "\u00B5",
  0xa1: "~",
  0xa2: "s",
  0xa3: "t",
  0xa4: "u",
  0xa5: "v",
  0xa6: "w",
  0xa7: "x",
  0xa8: "y",
  0xa9: "z",
  0xaa: "\u00A1",
  0xab: "\u00BF",
  0xac: "\u00D0",
  0xad: "\u00DD",
  0xae: "\u00DE",
  0xaf: "\u00AE",
  0xb0: "^",
  0xb1: "\u00A3",
  0xb2: "\u00A5",
  0xb3: "\u00B7",
  0xb4: "\u00A9",
  0xb5: "\u00A7",
  0xb6: "\u00B6",
  0xb7: "\u00BC",
  0xb8: "\u00BD",
  0xb9: "\u00BE",
  0xba: "[",
  0xbb: "]",
  0xbc: "\u00AF",
  0xbd: "\u00A8",
  0xbe: "\u00B4",
  0xbf: "\u00D7",
  0xc0: "{",
  0xc1: "A",
  0xc2: "B",
  0xc3: "C",
  0xc4: "D",
  0xc5: "E",
  0xc6: "F",
  0xc7: "G",
  0xc8: "H",
  0xc9: "I",
  0xca: "\u00AD",
  0xcb: "\u00F4",
  0xcc: "\u00F6",
  0xcd: "\u00F2",
  0xce: "\u00F3",
  0xcf: "\u00F5",
  0xd0: "}",
  0xd1: "J",
  0xd2: "K",
  0xd3: "L",
  0xd4: "M",
  0xd5: "N",
  0xd6: "O",
  0xd7: "P",
  0xd8: "Q",
  0xd9: "R",
  0xda: "\u00B9",
  0xdb: "\u00FB",
  0xdc: "\u00FC",
  0xdd: "\u00F9",
  0xde: "\u00FA",
  0xdf: "\u00FF",
  0xe0: "\\",
  0xe1: "\u00A2",
  0xe2: "S",
  0xe3: "T",
  0xe4: "U",
  0xe5: "V",
  0xe6: "W",
  0xe7: "X",
  0xe8: "Y",
  0xe9: "Z",
  0xea: "\u00B2",
  0xeb: "\u00D4",
  0xec: "\u00D6",
  0xed: "\u00D2",
  0xee: "\u00D3",
  0xef: "\u00D5",
  0xf0: "0",
  0xf1: "1",
  0xf2: "2",
  0xf3: "3",
  0xf4: "4",
  0xf5: "5",
  0xf6: "6",
  0xf7: "7",
  0xf8: "8",
  0xf9: "9",
  0xfa: "\u00B3",
  0xfb: "\u00DB",
  0xfc: "\u00DC",
  0xfd: "\u00D9",
  0xfe: "\u00DA",
  0xff: "\u009F",
};

// Build asciiToCp037 (reverse map)
const asciiToCp037 = {};
for (const [cp037Hex, asciiChar] of Object.entries(cp037ToAscii)) {
  if (!(asciiChar in asciiToCp037)) {
    asciiToCp037[asciiChar] = Number(cp037Hex);
  }
}

/**
 * Decodes a CP037 (EBCDIC) encoded buffer to an ASCII string
 * @param {Buffer} buffer - Input EBCDIC buffer
 * @returns {string} ASCII string
 */
function decodeCp037ToAscii(buffer) {
  return Array.from(buffer)
    .map((byte) => cp037ToAscii[byte] || "?")
    .join("");
}

/**
 * Encodes an ASCII string to CP037 (EBCDIC) buffer
 * @param {string} str - Input ASCII string
 * @returns {Buffer} CP037 buffer
 */
function encodeAsciiToCp037(str) {
  const bytes = [];
  for (const element of str) {
    const asciiChar = element;
    const cp037Byte = Object.prototype.hasOwnProperty.call(
      asciiToCp037,
      asciiChar
    )
      ? asciiToCp037[asciiChar]
      : asciiToCp037["?"];
    bytes.push(cp037Byte !== undefined ? cp037Byte : 0x6f); // 0x6f = '?'
  }
  return Buffer.from(bytes);
}

module.exports = {
  decodeCp037ToAscii,
  encodeAsciiToCp037,
};
